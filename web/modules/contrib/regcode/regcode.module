<?php

/**
 * @file
 * Main functionality and hooks of regcode module.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;

// Define validation error codes.
define('REGCODE_VALIDITY_NOTEXISTING', 0);
define('REGCODE_VALIDITY_NOTAVAILABLE', 1);
define('REGCODE_VALIDITY_TAKEN', 2);
define('REGCODE_VALIDITY_EXPIRED', 3);

define('REGCODE_MODE_REPLACE', 0);
define('REGCODE_MODE_SKIP', 1);

define('REGCODE_CLEAN_TRUNCATE', 1);
define('REGCODE_CLEAN_INACTIVE', 3);
define('REGCODE_CLEAN_EXPIRED', 4);

/**
 * Implements hook_help().
 */
function regcode_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'regcode.admin_list':
      $output  = '<p>' . t('View and manage created registration codes.') . '</p>';
      break;

    case 'regcode.admin_create':
      $output  = '<p>' . t('Create manually or generate new registration codes.') . '</p>';
      break;

    case 'regcode.admin_manage':
      $output  = '<p>' . t('Provides bulk management features for created registration codes.') . '</p>';
      break;

    case 'regcode.admin_settings':
      $output  = '<p>' . t('Configure the registration code module.') . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function regcode_form_user_register_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $code_optional = \Drupal::config('regcode.settings')->get('regcode_optional');
  $form['regcode'] = array(
    '#title' => Html::escape(\Drupal::config('regcode.settings')->get('regcode_field_title')),
    '#description' => Html::escape(\Drupal::config('regcode.settings')->get('regcode_field_description')),
    '#description' => \Drupal\Component\Utility\Html::escape(\Drupal::config('regcode.settings')->get('regcode_field_description')),
    '#required' => !($code_optional || \Drupal::currentUser()->hasPermission('administer users')),
    '#element_validate' => array('regcode_code_element_validate'),
  );

  $form['actions']['submit']['#submit'][] = 'regcode_user_register_form_submit_handler';

  // Capture the code from the url and inject it into the registration form.
  if (isset($_GET['regcode'])) {
    /*
     * Form API can handle potentially unsafe characters as long as they are
     * not printed directly. This code gets trimmed in regcode_code_validate().
     */
    $form['regcode']['#value']       = $_GET['regcode'];
    $form['regcode']['#description'] = NULL;
    $form['regcode']['#disabled']    = TRUE;
  }
}

/**
 * Validate the content of the code-field on user registration.
 */
function regcode_code_element_validate(array &$element, FormStateInterface $form_state) {
  if (mb_strlen(trim($element['#value']))) {
    $code = regcode_code_validate($element['#value']);
    if (!is_object($code)) {
      $form_state->setError($element, regcode_errormsg($code));
      \Drupal::logger('regcode')->warning('User entered invalid registration code (@code)', array('@code' => $element['#value']));
    }
  }
}

/**
 * Custom user_register_form handler.
 * Update a regcode data in the database.
 */
function regcode_user_register_form_submit_handler(array &$form, FormStateInterface $form_state) {
  $regcode = $form_state->getValue('regcode');
  $uid = $form_state->getValue('uid');
  if (!empty($regcode) && !empty($uid)) {
    $code = regcode_code_consume($regcode, $uid);
    if ($code) {
      $username = $form_state->getValue('name');
      \Drupal::logger('regcode')->info(
        t('The registration code "@code" was used by user @user with UID @uid.',
          ['@code' => $regcode,
           '@uid' => $uid,
           '@user' => $username
          ])
      );
    }
    else {
      \Drupal::logger('regcode')->error(t('Error checking code @code.', ['@code' => $code]));
    }
  }
}

/**
 * Return text message requested by given identifier/constant.
 *
 * @param int $err
 *   The error message code.
 *
 * @return string
 *   The text of the message.
 */
function regcode_errormsg($err) {
  $messages = array(
    REGCODE_VALIDITY_NOTEXISTING => t('Registration code does not exist'),
    REGCODE_VALIDITY_NOTAVAILABLE => t('Registration code is not available'),
    REGCODE_VALIDITY_TAKEN => t('Registration code has already been used'),
    REGCODE_VALIDITY_EXPIRED => t('Registration code has expired'),
  );
  return isset($messages[$err]) ? $messages[$err] : FALSE;
}

/**
 * Load a registration code.
 *
 * @param int|null $id
 *   The database primary key (rid).
 * @param array $conditions
 *   An associative array containing the search conditions.
 *
 * @return object|bool
 *   The regcode object or FALSE if the code does not exist.
 *
 * @example
 *   regcode_load(1231); // Loads the regcode with rid=1231
 *   regcode_load(NULL, array('code'=>'foobar')); // Loads the "foobar" regcode
 */
function regcode_load_single($id, $conditions = array()) {

  // Build the query.
  $query = \Drupal::database()->select('regcode')
    ->fields('regcode', array(
      'rid', 'uid', 'created', 'lastused', 'begins',
      'expires', 'code', 'is_active', 'maxuses', 'uses'))
    ->range(0, 1);

  // Allow mixed search parameters.
  if (!empty($id)) {
    $query->condition('rid', $id);
  }
  else {
    foreach ($conditions as $field => $value) {
      $query->condition($field, $value);
    }
  }

  // Run the query and grab a single regcode.
  $regcode = $query->execute()->fetchObject();
  if (!$regcode) {
    return FALSE;
  }

  /*
   * Entity loaders expect arrays of objects. entity_load and
   * this function both invoke the hook below.
   */
  $reg_codes = [$regcode->rid => $regcode];
  \Drupal::moduleHandler()->invokeAll('regcode_load', [$reg_codes]);

  return $reg_codes[$regcode->rid];
}

/**
 * Validate a regcode.
 *
 * @param string $regcode
 *   The regcode alphanumeric code.
 *
 * @return bool|int|object
 *   An error code, or the loaded regcode.
 */
function regcode_code_validate($regcode) {

  // Load the code.
  $code = regcode_load_single(NULL, array('code' => trim($regcode)));

  // Check validity.
  if ($code === FALSE) {
    return REGCODE_VALIDITY_NOTEXISTING;
  }
  if ($code->uses >= $code->maxuses && $code->maxuses !== '0') {
    return REGCODE_VALIDITY_TAKEN;
  }
  if (!$code->is_active) {
    return REGCODE_VALIDITY_NOTAVAILABLE;
  }
  if (!empty($code->begins) && $code->begins > \Drupal::time()->getRequestTime()) {
    return REGCODE_VALIDITY_NOTAVAILABLE;
  }
  if (!empty($code->expires) && $code->expires < \Drupal::time()->getRequestTime()) {
    return REGCODE_VALIDITY_EXPIRED;
  }

  return $code;
}

/**
 * Consume a regcode and attribute it to a user.
 *
 * @param string $regcode
 *   The registration code.
 * @param int $account_id
 *   Optional user id to assign the given code to.
 *
 * @return mixed
 *   An error code, or TRUE if the code was assigned successfully.
 */
function regcode_code_consume($regcode, $account_id) {
  $code = regcode_code_validate($regcode);

  // Check the code validated, otherwise return the error code.
  if (!is_object($code)) {
    return $code;
  }

  $code->uses++;

  // Mark the code inactive if it's used up.
  $active = 1;
  if ($code->maxuses != 0 && $code->uses >= $code->maxuses) {
    $active = 0;
  }

  // Use the code.
  \Drupal::database()->update('regcode')
    ->fields(array(
        'uses' => $code->uses,
        'lastused' => \Drupal::time()->getRequestTime(),
        'uid' => $account_id,
        'is_active' => $active,
      ))
    ->condition('rid', $code->rid)
    ->execute();

  // Trigger the regcode_used hook.
  $account = \Drupal::service('entity_type.manager')->getStorage('user')->load($account_id);
  $account->regcode = $code;

  foreach (\Drupal::moduleHandler()->getImplementations('regcode_used') as $module) {
    $hook = $module . '_regcode_used';
    $hook($code, $account);
  }

  return $code;
}

/**
 * Save given code to a record in the Database and calls the regcode_presave hook.
 *
 * @param object $code
 *   A code object (required fields are code, begins, expires, is_active, and
 *   maxuses.
 * @param int $action
 *   Action to perform when saving the code.
 *
 * @return bool
 *   TRUE if the code was saved.
 */
function regcode_save($code, $action = REGCODE_MODE_REPLACE) {

  // Sanity check.
  if (empty($code) || empty($code->code)) {
    return FALSE;
  }

  // Trigger the regcode_save hook.
  foreach (\Drupal::moduleHandler()->getImplementations('regcode_presave') as $module) {
    $hook = $module . '_regcode_presave';
    $hook($code);
  }

  // Insert mode.
  if ($action == REGCODE_MODE_REPLACE) {
    \Drupal::database()->delete('regcode')
      ->condition('code', $code->code)
      ->execute();
  }

  // Insert.
  $rid = \Drupal::database()->insert('regcode')
    ->fields(array(
      'created'   => \Drupal::time()->getRequestTime(),
      'begins'    => empty($code->begins) ? NULL : (int) $code->begins,
      'expires'   => empty($code->expires) ? NULL : (int) $code->expires,
      'code'      => Html::escape($code->code),
      'is_active' => isset($code->is_active) ? $code->is_active : 1,
      'maxuses'   => isset($code->maxuses) ? (int) $code->maxuses : 1,
    ))
    ->execute();

  return $rid;
}

/**
 * Delete regcode codes.
 *
 * @param int $op
 *   The operation ID.
 *
 * @return bool|object|int
 *   Boolean false if nothing happened. True if tables were empties. The number
 *   of deleted rows otherwise.
 */
function regcode_clean($op) {
  $res = FALSE;

  switch ($op) {
    case REGCODE_CLEAN_TRUNCATE:
      \Drupal::database()->query('TRUNCATE {regcode}');
      \Drupal::database()->query('TRUNCATE {regcode_term}');
      $res = TRUE;
      break;

    case REGCODE_CLEAN_EXPIRED:
      $res = \Drupal::database()->delete('regcode')
        ->condition('expires', \Drupal::time()->getRequestTime(), '<')
        ->execute();
      break;

    case REGCODE_CLEAN_INACTIVE:
      $res = \Drupal::database()->delete('regcode')
        ->condition('is_active', 0)
        ->execute();
      break;
  }

  return $res;
}

/**
 * Generate a code.
 */
function regcode_generate($length, $output, $case) {
  static $seeded = FALSE;

  // Possible seeds.
  $outputs['alpha']    = 'abcdefghijklmnopqrstuvwqyz';
  $outputs['numeric']  = '0123456789';
  $outputs['alphanum'] = 'abcdefghijklmnopqrstuvwqyz0123456789';
  $outputs['hexadec']  = '0123456789abcdef';

  // Choose seed.
  if (isset($outputs[$output])) {
    $output = $outputs[$output];
  }

  // Seed generator (only do this once per invocation).
  if (!$seeded) {
    list($usec, $sec) = explode(' ', microtime());
    $seed = (float) $sec + ((float) $usec * 100000);
    mt_srand($seed);
    $seeded = TRUE;
  }

  // Generate.
  $str = '';
  $output_count = strlen($output);
  for ($i = 0; $length > $i; $i++) {
    $str .= $output{mt_rand(0, $output_count - 1)};
  }
  if ($case) {
    $str = strtoupper($str);
  }

  return $str;
}

/**
 * Regcode delete action.
 */
function regcode_delete_action(&$object, $context = array()) {
  \Drupal::database()->delete('regcode')
    ->condition('rid', $object->rid)
    ->execute();
}

/**
 * Regcode activate action.
 */
function regcode_activate_action(&$object, $context = array()) {
  \Drupal::database()->update('regcode')
    ->fields(array('is_active' => 1))
    ->condition('rid', $object->rid)
    ->execute();
}

/**
 * Regcode deactivate action.
 */
function regcode_deactivate_action(&$object, $context = array()) {
  \Drupal::database()->update('regcode')
    ->fields(array('is_active' => 0))
    ->condition('rid', $object->rid)
    ->execute();
}

/**
 * Get a list of terms from the registration code vocabulary.
 */
function regcode_get_vocab_terms() {
  $tree  = \Drupal::service('entity_type.manager')->getStorage("taxonomy_term")->loadTree(\Drupal::config('regcode.settings')->get('regcode_vocabulary'));
  $terms = array();
  foreach ($tree as $term) {
    $terms[$term->tid] = $term->name;
  }
  return $terms;
}

/**
 * Implements hook_token_info().
 */
function regcode_token_info() {
  $type = array(
    'name' => t('Registration Codes'),
    'description' => t('Replacement tokens for registration codes'),
    'needs-data' => 'regcode',
  );

  $regcode['created'] = array(
    'name' => t("Code creation time"),
    'description' => t("The date the regcode was created."),
    'type' => 'date',
  );

  $regcode['lastused'] = array(
    'name' => t("Code last used time"),
    'description' => t("The date the regcode was used last."),
    'type' => 'date',
  );

  $regcode['begins'] = array(
    'name' => t("Code activation date"),
    'description' => t("The date the regcode gets activated."),
    'type' => 'date',
  );

  $regcode['expires'] = array(
    'name' => t("Code expiry date"),
    'description' => t("The date the regcode expires."),
    'type' => 'date',
  );

  $regcode['code'] = array(
    'name' => t("Registration code"),
    'description' => t("One single registration code"),
  );

  $regcode['regurl'] = array(
    'name' => t("Registration URL"),
    'description' => t("Link to the registration page with regcode included"),
  );

  $regcode['is_active'] = array(
    'name' => t("State of the regcode"),
    'description' => t("Whether the code is active"),
  );

  $regcode['maxuses'] = array(
    'name' => t("Maximum usage count"),
    'description' => t("Maximum times a code can be used"),
  );

  $regcode['uses'] = array(
    'name' => t("Current usage count"),
    'description' => t("Number of times the code already has been used"),
  );

  return array(
    'types' => array('regcode' => $type),
    'tokens' => array('regcode' => $regcode),
  );
}

/**
 * Implements hook_tokens().
 */
function regcode_tokens($type, $tokens, array $data = array(), array $options = array()) {
  if (isset($options['language'])) {
    $language_code = $options['language']->language;
  }
  else {
    $language_code = NULL;
  }

  $replacements = [];

  if ($type == 'regcode' && !empty($data['regcode'])) {
    $regcode = $data['regcode'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'created':
          $replacements[$original] = \Drupal::service('date.formatter')->format($regcode->created, 'medium', '', NULL, $language_code);
          break;

        case 'lastused':
          $replacements[$original] = \Drupal::service('date.formatter')->format($regcode->created, 'medium', '', NULL, $language_code);
          break;

        case 'begins':
          $replacements[$original] = \Drupal::service('date.formatter')->format($regcode->created, 'medium', '', NULL, $language_code);
          break;

        case 'expires':
          $replacements[$original] = \Drupal::service('date.formatter')->format($regcode->created, 'medium', '', NULL, $language_code);
          break;

        case 'code':
          $replacements[$original] = $regcode->code;
          break;

        case 'regurl':
          $replacements[$original] = Url::fromRoute('user.register');
          break;

        case 'is_active':
          $replacements[$original] = $regcode->is_active ? t('active') : t('inactive');
          break;

        case 'maxuses':
          $replacements[$original] = $regcode->maxuses;
          break;

        case 'uses':
          $replacements[$original] = $regcode->uses;
          break;
      }
    }

    if ($created_tokens = \Drupal::token()->findWithPrefix($tokens, 'created')) {
      $replacements += \Drupal::token()->generate('date', $created_tokens, array('date' => $regcode->created), $options);
    }

    if ($lastused_tokens = \Drupal::token()->findWithPrefix($tokens, 'lastused')) {
      $replacements += \Drupal::token()->generate('date', $lastused_tokens, array('date' => $regcode->lastused), $options);
    }

    if ($begins_tokens = \Drupal::token()->findWithPrefix($tokens, 'begins')) {
      $replacements += \Drupal::token()->generate('date', $begins_tokens, array('date' => $regcode->begins), $options);
    }

    if ($expires_tokens = \Drupal::token()->findWithPrefix($tokens, 'expires')) {
      $replacements += \Drupal::token()->generate('date', $expires_tokens, array('date' => $regcode->expires), $options);
    }
  }

  return $replacements;
}

/**
 * Ensure a blank date validates.
 */
function _regcode_date_validate(array &$element, FormStateInterface $form_state) {
  if (isset($element['#value']) && !empty($element['#value'])) {
    $date  = strtotime($element['#value']);
    $day   = date('d', $date);
    $month = date('m', $date);
    $year  = date('Y', $date);
    if (!checkdate($month, $day, $year)) {
      $form_state->setError($element, t('The specified date is invalid.'));
    }
  }
  return $element;
}
