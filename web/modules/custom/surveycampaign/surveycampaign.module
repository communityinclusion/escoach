<?php

/**
 * @file
 * Contains surveycampaign.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Component\Utility\SafeMarkup;
use Drupal\Core\Config\ConfigFactoryInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\UserSession;
use Drupal\user\Entity\User;
use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\Core\Session\AccountProxyInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\HtmlCommand;
use \Drupal\Core\Ajax\InsertCommand;

/**
 * Implements hook_help().
 */
function surveycampaign_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the surveycampaign module.
    case 'help.page.surveycampaign':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Survey interactions') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function surveycampaign_theme() {
  return [
    'surveycampaign' => [
      'render element' => 'children',
    ],
  ];
} 
function surveycampaign_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  module_set_weight('surveycampaign', 900);
  if($form['#id'] == 'surveymessages-configuration-form' ) {
    
    $form['#attached']['library'][] = 'surveycampaign/surveycampaign.library';
  }
  
}
function surveycampaign_form_user_register_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $triggeringevent = $form_state->getTriggeringElement();
  $trigger = $triggeringevent['#name'];
  if ($trigger == 'survey_participants_profiles[0][entity][field_registration_code][0][value]') {
    if($form_state->getValue(['survey_participants_profiles',0,'entity','field_registration_code',0,'value']) && $form_state->getValue(['survey_participants_profiles',0,'entity','field_registration_code',0,'value']) != "") 
    {
      //$response->addCommand(new InsertCommand('#codemessage',$message ));
    }
    else 
    {
    } 

  }
  
  

  module_set_weight('surveycampaign', 900);
  $form['account']['mail']['#required'] = TRUE;
  $form['#validate'][] = 'surveycampaign_profile_cellphone_validate';
  $form['survey_participants_profiles']['widget'][0]['entity']['field_registration_code']['widget'][0]['value']['#ajax'] = array(
    'callback' => 'surveycampaignAjaxCallback',
    'event' => 'change',
    'wrapper' => 'edit-survey-participants-profiles-0-entity-field-provider-0-target-id',
  );
  $form['survey_participants_profiles']['widget'][0]['entity']['field_registration_code']['widget'][0]['value']['#prefix'] = '<div id="codemessage"></div>';
  //$showit = print_r($form['field_registration_code']['#title'], true);
  $form['field_registration_code']['widget'][0]['value']['#title'] = 'Fuck You';
  //$form['survey_participants_profiles']['widget'][0]['entity']['field_provider']['widget'][0]['target_id']['#title'] = 'blurg';
  //$form['survey_participants_profiles']['widget'][0]['entity']['field_registration_code']['widget'][0]['value']['#title'] = 'blurg';
  //$form['field_registration_code']['widget']['#required'] = TRUE;
  //$showit = print_r($form['field_registration_code']['widget'], true);
  $form['field_registration_code']['widget']['#title'] = 'Fuck You';
  //$showme = print_r($form['survey_participants_profiles']['widget'][0]['entity']['field_registration_code']['widget']['#validated'],true);

  //\Drupal::logger('surveycampaign alert')->notice("Showit: " . $showit );
  //$showme2 = print_r($form['survey_participants_profiles']['widget'][0]['entity']['field_registration_code']['widget']['#title'],true);
  //\Drupal::logger('surveycampaign alert')->notice("second time: " . $showme2 );
  
  
}
/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @return \Drupal\Core\Ajax\AjaxResponse
 */
function surveycampaignAjaxCallbackTwo(array &$form, FormStateInterface $form_state) {
  $response = new AjaxResponse();
  $response->addCommand(new InsertCommand('#codemessage',$message ));

  return $response;

}
function surveycampaignAjaxCallback(array &$form, FormStateInterface $form_state) {
  // Prepare our textfield. check if the example select field has a selected option.
  $formcode = $form_state->getValue( ['survey_participants_profiles',0,'entity','field_registration_code',0,'value']);
  if (!empty($formcode) && $formcode != "" ) {
  
    // Get the text of the selected option.
    
    //$showit = var_export($form_state->getValue( ['survey_participants_profiles',0,'entity','field_registration_code',0]), true);
    

      // use code Dt54UiP0n
    $configuser = \Drupal::config('surveycampaign.settings');
    $provcodes = $configuser->get('def_provider_code');
    $provnames = $configuser->get('def_provider_name');
    $countcodes = is_array($provcodes) ? count($provcodes) : 0;

    
    for ($i = 0; $i < $countcodes; $i++) {
      $thiscode = !empty($provcodes) && $provcodes[$i] ? $provcodes[$i] : '';
      $thisname = !empty($provnames) && $provnames[$i] ? $provnames[$i][0]['target_id'] : '';
      $term = taxonomy_term_load($thisname);

      if($formcode && $formcode == preg_replace('/\s+/', '',$thiscode)) {
        
        $term = taxonomy_term_load($thisname);
        $termarray = array($term->getName());
        


        // Instantiate a new ajax response object.
        $response = new AjaxResponse();

        // Will invoke the jQuery method .val() https://api.jquery.com/val/
        $response->addCommand(new InvokeCommand('#edit-survey-participants-profiles-0-entity-field-provider-0-target-id','val', [$termarray]));

        // Return the AJAX response.
        return $response;
      
      }
      
      
    } 
    $message = "That is not a valid registration code";
    $response = new AjaxResponse();
    
    $response->addCommand(new InvokeCommand('#edit-survey-participants-profiles-0-entity-field-provider-0-target-id','val',['']));

    return $response;

    
  }
  
}




function surveycampaign_form_user_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{
  foreach (array_keys($form['actions']) as $action) {
    if ($form_state->get('user_pass_reset')) {
      $form['actions']['submit']['#submit'][] = '_surveycampaign_user_form_submit';
      
    }
  }
  if ($form_id == 'user_register_form' ) { 
    $form['#submit'][] = 'surveycampaign_user_register_submit';
    }
}


function _surveycampaign_user_form_submit(array $form, FormStateInterface $form_state){
  //Add logic for checking is this is first time logged in User
  $form_state->setRedirect('<front>');
}

function surveycampaign_profile_cellphone_validate (&$form, $form_state) {
  $formphone = $form_state->getValues()['survey_participants_profiles'][0]['entity']['field_cell_phone'][0]['value'];
  $checknewphone = preg_replace('/\D+/', '',$formphone);
  $storage = \Drupal::entityTypeManager()->getStorage('profile')
            ->loadByProperties([
                'type' => 'survey_participants',
            ]);
  if (!preg_match('/^\d{10}$/', $checknewphone)) {
    $form_state->setErrorByName("survey_participants_profiles][0][entity][field_cell_phone][0][value", "Cellphone number $formphone must be a 10-digit North American phone number in the format (###) ###-####. No leading \"1\"");
  }
}
function surveycampaign_cron()
{
  

  // call the account switcher service
  $accountSwitcher = \Drupal::service('account_switcher');
  // switch to the admin user
  $accountSwitcher->switchTo(new UserSession(['uid' => 1]));
  
  $message = 'Surveycampaign cron run: ' . date('Y-m-d H:i:s');
  
  $config = \Drupal::config('surveycampaign.settings');
  $libconfig = \Drupal::config('surveycampaign.library_settings');
  $surveyid =  $config->get('defaultid');
  $surveyid2 =  $config->get('secondaryid');
  $database = \Drupal::database();
  $todaydate = date("Y-m-d");
  $query1 = $database->select('surveycampaign_campaigns', 'sc')
  ->fields('sc', array(
  'campaignid'
    )
  )
  ->condition('sc.surveyid', $surveyid)
  ->condition('senddate', $database->escapeLike($todaydate) . '%', 'LIKE')
  ->execute();
  $campaignid = $query1->fetchField();
  $query2 = $database->select('surveycampaign_campaigns', 'sc')
  ->fields('sc', array(
  'campaignid'
    )
  )
  ->condition('sc.surveyid', $surveyid2)
  ->condition('senddate', $database->escapeLike($todaydate) . '%', 'LIKE')
  ->execute();
  $campaignid2 = $query2->fetchField();
  $checkTime = date('H:i');
  $checkTime = date('H:i', strtotime($checkTime));
  $runTasksBegin = date('H:i', strtotime('07:00'));
  $runTasksEnd = date('H:i', strtotime('20:00'));
  if (($checkTime >= $runTasksBegin) && ($checkTime <= $runTasksEnd)){
    $send2 = $surveyid2 ? \Drupal::service('surveycampaign.twilio_coach')->load($surveyid2,2,0) : null;
    $send = $surveyid ? \Drupal::service('surveycampaign.twilio_coach')->load($surveyid,1,0) : null;
    $sendtext = \Drupal::service('surveycampaign.twilio_coach')->textSchedule($surveyid,$campaignid);
    $sendtext2 = \Drupal::service('surveycampaign.twilio_coach')->textSchedule($surveyid2,$campaignid2);
    $nowTime = date('H:i');
    $nowTime = date('H:i', strtotime($nowTime));
  }
  // closing screen management and results table population run just a few times in the very early AM
  $manageClosingBegin = date('H:i', strtotime('07:20'));
  $manageClosingEnd = date('H:i', strtotime('07:35'));
  
    
  if (($nowTime >= $manageClosingBegin) && ($nowTime <= $manageClosingEnd)){
      
    $manageclosing = \Drupal::service('surveycampaign.twilio_coach')->manageClosingScreen($surveyid,$todaydate);
    //$manageclosing2 = \Drupal::service('surveycampaign.twilio_coach')->manageClosingScreen($surveyid2,$todaydate);
    $saveResponses = \Drupal::service('surveycampaign.survey_responses')->load($surveyid);
    $saveResponses2 = \Drupal::service('surveycampaign.survey_responses')->load($surveyid2);
  }
  
  $accountSwitcher->switchBack();
 
  
  
} 

/**
* Implements hook_mail().
*/
function surveycampaign_mail($key, &$message, $params) {
  $options = array(
    'langcode' => $message['langcode'],
  );
 
  switch ($key) {
    case 'mailgun':
    
      $message['from'] = \Drupal::config('system.site')->get('mail');
      //$message['subject'] = t('Non reply to survey');
      $message['body'][] = $params['message'];
      $message['subject'] = t('@title', array('@title' => $params['title']), $options);
      
    
    break;
    case 'unpublish_job':
    $message['from'] = \Drupal::config('system.site')->get('mail');
    $message['subject'] = t('Your job ad on NERCVE.org has expired: @title', array('@title' => $params['node_title']), $options);
    $message['body'][] = $params['message'][0];
    break;
    case 'create_job':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('Job ad created on NERCVE.org: @title', array('@title' => $params['node_title']), $options);
      $message['body'][] = t('Your job ad, @title was posted to NERCVE.org.  After an adminstrator approves your posting it will be available on our website employment board for 120 days.', array('@title' => $params['node_title']), $options);
      break;
  }
}

/**
* Implements hook_entity_insert().
*/
function surveycampaign_entity_insert(Drupal\Core\Entity\EntityInterface $entity) {

  if($entity->getEntityTypeId() === 'user')
  {  
    //$entity->save();
    $uid = $entity->id();
    \Drupal::logger('surveycampaign')->notice("User inserted UID: " . $uid);
    //$profilechange = surveycampaign_profile_update($uid);
    
  } 
  if($entity->getEntityTypeId() === 'profile')
  {  
    //$entity->save();
    $pid = $entity->id();
    \Drupal::logger('surveycampaign')->notice("Profile inserted ID: " . $pid);
    $storage = \Drupal::entityTypeManager()->getStorage('profile')
    ->loadByProperties([
        'profile_id' => $pid,
        'type' => 'survey_participants',
        'is_default' => 1,
    ]);
    $storereport = print_r($storage, true);
    \Drupal::logger('surveycampaign')->notice("Profile array: " . $storereport);
    // use code Dt54UiP0n
    $configuser = \Drupal::config('surveycampaign.settings');
    //\Drupal::logger('surveycampaign')->notice("Default id : " . $checkconfig);
    $provcodes = $configuser->get('def_provider_code');
    $provnames = $configuser->get('def_provider_name');
    $countcodes = is_array($provcodes) ? count($provcodes) : 0;

    foreach($storage as $profile) {
      $formcode = $profile->get('field_registration_code')->value ?  preg_replace('/\s+/', '',$profile->get('field_registration_code')->value) : null;
      for ($i = 0; $i < $countcodes; $i++) {
        $thiscode = !empty($provcodes) && $provcodes[$i] ? $provcodes[$i] : '';
        $thisname = !empty($provnames) && $provnames[$i] ? $provnames[$i][0]['target_id'] : '';
        $term = taxonomy_term_load($thisname);
        if($formcode && $formcode == preg_replace('/\s+/', '',$thiscode)) {
          $term = taxonomy_term_load($thisname);
          $profile->set('field_provider',array(
          'value' => $term));
          $profile->save();
        }
      }
   }
    
    
  } 
  


}


  
function _surveycampaign_profile_register_validate (&$form, $form_state) {

  $formphone = $form_state->getValues()['survey_participants_profiles'][0]['entity']['field_cell_phone'][0]['value'];
  $checknewphone = preg_replace('/\D+/', '',$formphone);
  $storage = \Drupal::entityTypeManager()->getStorage('profile')
            ->loadByProperties([
                'type' => 'survey_participants',
            ]);
  if (!preg_match('/^\d{10}$/', $checknewphone)) {
    $form_state->setErrorByName("survey_participants_profiles][0][entity][field_cell_phone][0][value", "Cellphone number $formphone must be a 10-digit North American phone number in the format (###) ###-####. No leading \"1\"");
  }
          
            
           
  foreach($storage as $profile) {

    
    $cellphone = $profile->get('field_cell_phone')->value;
    $cleanphone = preg_replace('/\D+/', '',$cellphone);
    if ($cleanphone == $checknewphone) { 
      
      $form_state->setErrorByName("survey_participants_profiles][0][entity][field_cell_phone][0][value",
    "Cellphone number $formphone is already in use by another survey participant.");
    }
    
  
  
    
  }
 
  
}




